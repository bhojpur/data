syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package v1.license;

option go_package = "github.com/bhojpur/data/pkg/api/v1/license;license";

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "pkg/api/v1/enterprise/enterprise.proto";

message ActivateRequest {
  // activation_code is a Bhojpur Data enterprise activation code. New users can
  // obtain trial activation codes
  string activation_code = 1;

  // expires is a timestamp indicating when this activation code will expire.
  // This should not generally be set (it's primarily used for testing), and is
  // only applied if it's earlier than the signed expiration time in
  // 'activation_code'.
  google.protobuf.Timestamp expires = 2;
}

message ActivateResponse {
  v1.enterprise.TokenInfo info = 1;
}

message GetActivationCodeRequest {}

message GetActivationCodeResponse {
  v1.enterprise.State state = 1;
  v1.enterprise.TokenInfo info = 2;
  string activation_code = 3;
}

message DeactivateRequest{}
message DeactivateResponse{}

message AddClusterRequest {
  // id is the unique, immutable identifier for this cluster
  string id = 1;
  // address is the public GPRC address where the cluster can be reached
  string address = 2;
  // If set, secret specifies the shared secret this cluster will use
  // to authenticate to the license server. Otherwise a secret will be
  // generated and returned in the response. 
  string secret = 3;
  // The datasvr address for users to connect to. 
  string user_address = 4;
  // The deployment ID value generated by each Cluster
  string cluster_deployment_id = 5;
  // This field indicates whether the address points to an enterprise server
  bool enterprise_server = 6;
}

message AddClusterResponse {
  string secret = 1;
}

message DeleteClusterRequest {
  string id = 1;
}
message DeleteClusterResponse {}

message ClusterStatus {
  string id = 1;
  string address = 2;
  string version = 3;
  bool auth_enabled = 4 [(gogoproto.moretags) = "db:\"auth_enabled\""];
  string client_id = 7 [(gogoproto.moretags) = "db:\"client_id\""];
  google.protobuf.Timestamp last_heartbeat = 5 [(gogoproto.moretags) = "db:\"last_heartbeat\"", (gogoproto.stdtime) = true]; 
  google.protobuf.Timestamp created_at = 6 [(gogoproto.moretags) = "db:\"created_at\"", (gogoproto.stdtime) = true]; 
}

// Note: Updates of the enterprise-server field are not allowed. In the worst case, a user can recreate their cluster if they need the field updated.
message UpdateClusterRequest {
  string id = 1;
  string address = 2;
  string user_address = 3;
  string cluster_deployment_id = 4;
}
message UpdateClusterResponse{}

message ListClustersRequest {}
message ListClustersResponse {
  repeated ClusterStatus clusters = 1;  
}

message DeleteAllRequest{}
message DeleteAllResponse {}

message HeartbeatRequest {
  string id = 1;
  string secret = 2;
  string version = 3;
  bool auth_enabled = 4;
  string client_id = 5;
}

message HeartbeatResponse {
  v1.enterprise.LicenseRecord license = 1;
}

message UserClusterInfo {
  string id = 1 [(gogoproto.moretags) = "db:\"id\""];
  string cluster_deployment_id = 2 [(gogoproto.moretags) = "db:\"cluster_deployment_id\""];
  string address = 3 [(gogoproto.moretags) = "db:\"user_address\""];
  bool enterprise_server = 4 [(gogoproto.moretags) = "db:\"is_enterprise_server\""];
}

message ListUserClustersRequest {}

message ListUserClustersResponse {
  repeated UserClusterInfo clusters = 1;
}

service API {
  // Activate enables the license service by setting the enterprise activation
  // code to serve.
  rpc Activate(ActivateRequest) returns (ActivateResponse) {}
  rpc GetActivationCode(GetActivationCodeRequest) returns (GetActivationCodeResponse) {}

  // DeleteAll deactivates the server and removes all data.
  rpc DeleteAll(DeleteAllRequest) returns (DeleteAllResponse) {}

  // CRUD operations for the datasvrs registered with this server.
  rpc AddCluster(AddClusterRequest) returns (AddClusterResponse) {}
  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse) {}
  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {}
  rpc UpdateCluster(UpdateClusterRequest) returns (UpdateClusterResponse) {}

  // Heartbeat is the RPC registered datasvrs make to the license server
  // to communicate their status and fetch updates.
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

  // Lists all clusters available to user
  rpc ListUserClusters(ListUserClustersRequest) returns (ListUserClustersResponse) {}
}
