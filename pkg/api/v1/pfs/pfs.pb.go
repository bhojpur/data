// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: pkg/api/v1/pfs/pfs.proto

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package pfs

import (
	auth "github.com/bhojpur/data/pkg/api/v1/auth"
	task "github.com/bhojpur/data/pkg/api/v1/task"
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These are the different places where a commit may be originated from
type OriginKind int32

const (
	OriginKind_ORIGIN_KIND_UNKNOWN OriginKind = 0
	OriginKind_USER                OriginKind = 1
	OriginKind_AUTO                OriginKind = 2
	OriginKind_FSCK                OriginKind = 3
	OriginKind_ALIAS               OriginKind = 4
)

// Enum value maps for OriginKind.
var (
	OriginKind_name = map[int32]string{
		0: "ORIGIN_KIND_UNKNOWN",
		1: "USER",
		2: "AUTO",
		3: "FSCK",
		4: "ALIAS",
	}
	OriginKind_value = map[string]int32{
		"ORIGIN_KIND_UNKNOWN": 0,
		"USER":                1,
		"AUTO":                2,
		"FSCK":                3,
		"ALIAS":               4,
	}
)

func (x OriginKind) Enum() *OriginKind {
	p := new(OriginKind)
	*p = x
	return p
}

func (x OriginKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_pfs_pfs_proto_enumTypes[0].Descriptor()
}

func (OriginKind) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_pfs_pfs_proto_enumTypes[0]
}

func (x OriginKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginKind.Descriptor instead.
func (OriginKind) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{0}
}

type FileType int32

const (
	FileType_RESERVED FileType = 0
	FileType_FILE     FileType = 1
	FileType_DIR      FileType = 2
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "RESERVED",
		1: "FILE",
		2: "DIR",
	}
	FileType_value = map[string]int32{
		"RESERVED": 0,
		"FILE":     1,
		"DIR":      2,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_pfs_pfs_proto_enumTypes[1].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_pfs_pfs_proto_enumTypes[1]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{1}
}

// CommitState describes the states a commit can be in.
// The states are increasingly specific, i.e. a commit that is FINISHED also counts as STARTED.
type CommitState int32

const (
	CommitState_COMMIT_STATE_UNKNOWN CommitState = 0
	CommitState_STARTED              CommitState = 1 // The commit has been started, all commits satisfy this state.
	CommitState_READY                CommitState = 2 // The commit has been started, and all of its provenant commits have been finished.
	CommitState_FINISHING            CommitState = 3 // The commit is in the process of being finished.
	CommitState_FINISHED             CommitState = 4 // The commit has been finished.
)

// Enum value maps for CommitState.
var (
	CommitState_name = map[int32]string{
		0: "COMMIT_STATE_UNKNOWN",
		1: "STARTED",
		2: "READY",
		3: "FINISHING",
		4: "FINISHED",
	}
	CommitState_value = map[string]int32{
		"COMMIT_STATE_UNKNOWN": 0,
		"STARTED":              1,
		"READY":                2,
		"FINISHING":            3,
		"FINISHED":             4,
	}
)

func (x CommitState) Enum() *CommitState {
	p := new(CommitState)
	*p = x
	return p
}

func (x CommitState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_pfs_pfs_proto_enumTypes[2].Descriptor()
}

func (CommitState) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_pfs_pfs_proto_enumTypes[2]
}

func (x CommitState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitState.Descriptor instead.
func (CommitState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{2}
}

type Delimiter int32

const (
	Delimiter_NONE Delimiter = 0
	Delimiter_JSON Delimiter = 1
	Delimiter_LINE Delimiter = 2
	Delimiter_SQL  Delimiter = 3
	Delimiter_CSV  Delimiter = 4
)

// Enum value maps for Delimiter.
var (
	Delimiter_name = map[int32]string{
		0: "NONE",
		1: "JSON",
		2: "LINE",
		3: "SQL",
		4: "CSV",
	}
	Delimiter_value = map[string]int32{
		"NONE": 0,
		"JSON": 1,
		"LINE": 2,
		"SQL":  3,
		"CSV":  4,
	}
)

func (x Delimiter) Enum() *Delimiter {
	p := new(Delimiter)
	*p = x
	return p
}

func (x Delimiter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Delimiter) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_pfs_pfs_proto_enumTypes[3].Descriptor()
}

func (Delimiter) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_pfs_pfs_proto_enumTypes[3]
}

func (x Delimiter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Delimiter.Descriptor instead.
func (Delimiter) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{3}
}

type SQLDatabaseEgress_FileFormat_Type int32

const (
	SQLDatabaseEgress_FileFormat_UNKNOWN SQLDatabaseEgress_FileFormat_Type = 0
	SQLDatabaseEgress_FileFormat_CSV     SQLDatabaseEgress_FileFormat_Type = 1
	SQLDatabaseEgress_FileFormat_JSON    SQLDatabaseEgress_FileFormat_Type = 2
	SQLDatabaseEgress_FileFormat_PARQUET SQLDatabaseEgress_FileFormat_Type = 3
)

// Enum value maps for SQLDatabaseEgress_FileFormat_Type.
var (
	SQLDatabaseEgress_FileFormat_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "CSV",
		2: "JSON",
		3: "PARQUET",
	}
	SQLDatabaseEgress_FileFormat_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"CSV":     1,
		"JSON":    2,
		"PARQUET": 3,
	}
)

func (x SQLDatabaseEgress_FileFormat_Type) Enum() *SQLDatabaseEgress_FileFormat_Type {
	p := new(SQLDatabaseEgress_FileFormat_Type)
	*p = x
	return p
}

func (x SQLDatabaseEgress_FileFormat_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLDatabaseEgress_FileFormat_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_pfs_pfs_proto_enumTypes[4].Descriptor()
}

func (SQLDatabaseEgress_FileFormat_Type) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_pfs_pfs_proto_enumTypes[4]
}

func (x SQLDatabaseEgress_FileFormat_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLDatabaseEgress_FileFormat_Type.Descriptor instead.
func (SQLDatabaseEgress_FileFormat_Type) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{60, 0, 0}
}

type Repo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Repo) Reset() {
	*x = Repo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repo) ProtoMessage() {}

func (x *Repo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repo.ProtoReflect.Descriptor instead.
func (*Repo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{0}
}

func (x *Repo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *Repo  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{1}
}

func (x *Branch) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Datum  string  `protobuf:"bytes,3,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetDatum() string {
	if x != nil {
		return x.Datum
	}
	return ""
}

// RepoInfo is the main data structure representing a Repo in etcd
type RepoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo                *Repo                  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Created             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	SizeBytesUpperBound int64                  `protobuf:"varint,3,opt,name=size_bytes_upper_bound,json=sizeBytesUpperBound,proto3" json:"size_bytes_upper_bound,omitempty"`
	Description         string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Branches            []*Branch              `protobuf:"bytes,5,rep,name=branches,proto3" json:"branches,omitempty"`
	// Set by ListRepo and InspectRepo if Bhojpur Data's auth system is active, but
	// not stored in etcd. To set a user's auth scope for a repo, use the
	// Bhojpur Data Auth API (in src/client/auth/auth.proto)
	AuthInfo *RepoAuthInfo     `protobuf:"bytes,6,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	Details  *RepoInfo_Details `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RepoInfo) Reset() {
	*x = RepoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoInfo) ProtoMessage() {}

func (x *RepoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoInfo.ProtoReflect.Descriptor instead.
func (*RepoInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{3}
}

func (x *RepoInfo) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *RepoInfo) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RepoInfo) GetSizeBytesUpperBound() int64 {
	if x != nil {
		return x.SizeBytesUpperBound
	}
	return 0
}

func (x *RepoInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RepoInfo) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *RepoInfo) GetAuthInfo() *RepoAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *RepoInfo) GetDetails() *RepoInfo_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

// RepoAuthInfo includes the caller's access scope for a repo, and is returned
// by ListRepo and InspectRepo but not persisted in etcd. It's used by the
// Bhojpur Data dashboard to render repo access appropriately. To set a user's auth
// scope for a repo, use the Bhojpur Data Auth API (in src/client/auth/auth.proto)
type RepoAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The callers access level to the relevant repo. These are very granular
	// permissions - for the end user it makes sense to show them the roles
	// they have instead.
	Permissions []auth.Permission `protobuf:"varint,1,rep,packed,name=permissions,proto3,enum=v1.auth.Permission" json:"permissions,omitempty"`
	// The caller's roles on the relevant repo. This includes inherited
	// roles from the cluster, group membership, etc.
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *RepoAuthInfo) Reset() {
	*x = RepoAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAuthInfo) ProtoMessage() {}

func (x *RepoAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAuthInfo.ProtoReflect.Descriptor instead.
func (*RepoAuthInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{4}
}

func (x *RepoAuthInfo) GetPermissions() []auth.Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *RepoAuthInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type BranchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch           *Branch   `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Head             *Commit   `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	Provenance       []*Branch `protobuf:"bytes,3,rep,name=provenance,proto3" json:"provenance,omitempty"`
	Subvenance       []*Branch `protobuf:"bytes,4,rep,name=subvenance,proto3" json:"subvenance,omitempty"`
	DirectProvenance []*Branch `protobuf:"bytes,5,rep,name=direct_provenance,json=directProvenance,proto3" json:"direct_provenance,omitempty"`
	Trigger          *Trigger  `protobuf:"bytes,6,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *BranchInfo) Reset() {
	*x = BranchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchInfo) ProtoMessage() {}

func (x *BranchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchInfo.ProtoReflect.Descriptor instead.
func (*BranchInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{5}
}

func (x *BranchInfo) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *BranchInfo) GetHead() *Commit {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *BranchInfo) GetProvenance() []*Branch {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *BranchInfo) GetSubvenance() []*Branch {
	if x != nil {
		return x.Subvenance
	}
	return nil
}

func (x *BranchInfo) GetDirectProvenance() []*Branch {
	if x != nil {
		return x.DirectProvenance
	}
	return nil
}

func (x *BranchInfo) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

// Trigger defines the conditions under which a head is moved, and to which
// branch it is moved.
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which branch this trigger refers to
	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// All indicates that all conditions must be satisfied before the trigger
	// happens, otherwise any conditions being satisfied will trigger it.
	All bool `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	// Triggers if the cron spec has been satisfied since the last trigger and
	// there's been a new commit.
	CronSpec string `protobuf:"bytes,3,opt,name=cron_spec,json=cronSpec,proto3" json:"cron_spec,omitempty"`
	// Triggers if there's been `size` new data added since the last trigger.
	Size string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	// Triggers if there's been `commits` new commits added since the last trigger.
	Commits int64 `protobuf:"varint,5,opt,name=commits,proto3" json:"commits,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{6}
}

func (x *Trigger) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Trigger) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *Trigger) GetCronSpec() string {
	if x != nil {
		return x.CronSpec
	}
	return ""
}

func (x *Trigger) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Trigger) GetCommits() int64 {
	if x != nil {
		return x.Commits
	}
	return 0
}

type CommitOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind OriginKind `protobuf:"varint,1,opt,name=kind,proto3,enum=v1.pfs.OriginKind" json:"kind,omitempty"`
}

func (x *CommitOrigin) Reset() {
	*x = CommitOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrigin) ProtoMessage() {}

func (x *CommitOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrigin.ProtoReflect.Descriptor instead.
func (*CommitOrigin) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{7}
}

func (x *CommitOrigin) GetKind() OriginKind {
	if x != nil {
		return x.Kind
	}
	return OriginKind_ORIGIN_KIND_UNKNOWN
}

// Commit is a reference to a commit (e.g. the collection of branches and the
// collection of currently-open commits in etcd are collections of Commit
// protos)
type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Id     string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{8}
}

func (x *Commit) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *Commit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// CommitInfo is the main data structure representing a commit in etcd
type CommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit       `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Origin *CommitOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// description is a user-provided script describing this commit
	Description         string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentCommit        *Commit                `protobuf:"bytes,4,opt,name=parent_commit,json=parentCommit,proto3" json:"parent_commit,omitempty"`
	ChildCommits        []*Commit              `protobuf:"bytes,5,rep,name=child_commits,json=childCommits,proto3" json:"child_commits,omitempty"`
	Started             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started,proto3" json:"started,omitempty"`
	Finishing           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=finishing,proto3" json:"finishing,omitempty"`
	Finished            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=finished,proto3" json:"finished,omitempty"`
	DirectProvenance    []*Branch              `protobuf:"bytes,9,rep,name=direct_provenance,json=directProvenance,proto3" json:"direct_provenance,omitempty"`
	Error               string                 `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
	SizeBytesUpperBound int64                  `protobuf:"varint,11,opt,name=size_bytes_upper_bound,json=sizeBytesUpperBound,proto3" json:"size_bytes_upper_bound,omitempty"`
	Details             *CommitInfo_Details    `protobuf:"bytes,12,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *CommitInfo) Reset() {
	*x = CommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfo) ProtoMessage() {}

func (x *CommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfo.ProtoReflect.Descriptor instead.
func (*CommitInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{9}
}

func (x *CommitInfo) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *CommitInfo) GetOrigin() *CommitOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CommitInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommitInfo) GetParentCommit() *Commit {
	if x != nil {
		return x.ParentCommit
	}
	return nil
}

func (x *CommitInfo) GetChildCommits() []*Commit {
	if x != nil {
		return x.ChildCommits
	}
	return nil
}

func (x *CommitInfo) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *CommitInfo) GetFinishing() *timestamppb.Timestamp {
	if x != nil {
		return x.Finishing
	}
	return nil
}

func (x *CommitInfo) GetFinished() *timestamppb.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *CommitInfo) GetDirectProvenance() []*Branch {
	if x != nil {
		return x.DirectProvenance
	}
	return nil
}

func (x *CommitInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CommitInfo) GetSizeBytesUpperBound() int64 {
	if x != nil {
		return x.SizeBytesUpperBound
	}
	return 0
}

func (x *CommitInfo) GetDetails() *CommitInfo_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type CommitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommitSet) Reset() {
	*x = CommitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSet) ProtoMessage() {}

func (x *CommitSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSet.ProtoReflect.Descriptor instead.
func (*CommitSet) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{10}
}

func (x *CommitSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommitSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitSet *CommitSet    `protobuf:"bytes,1,opt,name=commit_set,json=commitSet,proto3" json:"commit_set,omitempty"`
	Commits   []*CommitInfo `protobuf:"bytes,2,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *CommitSetInfo) Reset() {
	*x = CommitSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSetInfo) ProtoMessage() {}

func (x *CommitSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSetInfo.ProtoReflect.Descriptor instead.
func (*CommitSetInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{11}
}

func (x *CommitSetInfo) GetCommitSet() *CommitSet {
	if x != nil {
		return x.CommitSet
	}
	return nil
}

func (x *CommitSetInfo) GetCommits() []*CommitInfo {
	if x != nil {
		return x.Commits
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File      *File                  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	FileType  FileType               `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=v1.pfs.FileType" json:"file_type,omitempty"`
	Committed *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=committed,proto3" json:"committed,omitempty"`
	SizeBytes int64                  `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Hash      []byte                 `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{12}
}

func (x *FileInfo) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileInfo) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_RESERVED
}

func (x *FileInfo) GetCommitted() *timestamppb.Timestamp {
	if x != nil {
		return x.Committed
	}
	return nil
}

func (x *FileInfo) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FileInfo) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type CreateRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo        *Repo  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Update      bool   `protobuf:"varint,3,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *CreateRepoRequest) Reset() {
	*x = CreateRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepoRequest) ProtoMessage() {}

func (x *CreateRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepoRequest.ProtoReflect.Descriptor instead.
func (*CreateRepoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{13}
}

func (x *CreateRepoRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *CreateRepoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRepoRequest) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

type InspectRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *Repo `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *InspectRepoRequest) Reset() {
	*x = InspectRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectRepoRequest) ProtoMessage() {}

func (x *InspectRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectRepoRequest.ProtoReflect.Descriptor instead.
func (*InspectRepoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{14}
}

func (x *InspectRepoRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

type ListRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of (system) repos that should be returned
	// an empty string requests all repos
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListRepoRequest) Reset() {
	*x = ListRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoRequest) ProtoMessage() {}

func (x *ListRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoRequest.ProtoReflect.Descriptor instead.
func (*ListRepoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{15}
}

func (x *ListRepoRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo  *Repo `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Force bool  `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteRepoRequest) Reset() {
	*x = DeleteRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepoRequest) ProtoMessage() {}

func (x *DeleteRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepoRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRepoRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *DeleteRepoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type StartCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent may be empty in which case the commit that Branch points to will be used as the parent.
	// If the branch does not exist, the commit will have no parent.
	Parent *Commit `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// description is a user-provided string describing this commit
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Branch      *Branch `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *StartCommitRequest) Reset() {
	*x = StartCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCommitRequest) ProtoMessage() {}

func (x *StartCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCommitRequest.ProtoReflect.Descriptor instead.
func (*StartCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{17}
}

func (x *StartCommitRequest) GetParent() *Commit {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *StartCommitRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartCommitRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type FinishCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// description is a user-provided string describing this commit. Setting this
	// will overwrite the description set in StartCommit
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Error       string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Force       bool   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *FinishCommitRequest) Reset() {
	*x = FinishCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishCommitRequest) ProtoMessage() {}

func (x *FinishCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishCommitRequest.ProtoReflect.Descriptor instead.
func (*FinishCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{18}
}

func (x *FinishCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *FinishCommitRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FinishCommitRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FinishCommitRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type InspectCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// Wait causes inspect commit to wait until the commit is in the desired state.
	Wait CommitState `protobuf:"varint,2,opt,name=wait,proto3,enum=v1.pfs.CommitState" json:"wait,omitempty"`
}

func (x *InspectCommitRequest) Reset() {
	*x = InspectCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectCommitRequest) ProtoMessage() {}

func (x *InspectCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectCommitRequest.ProtoReflect.Descriptor instead.
func (*InspectCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{19}
}

func (x *InspectCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *InspectCommitRequest) GetWait() CommitState {
	if x != nil {
		return x.Wait
	}
	return CommitState_COMMIT_STATE_UNKNOWN
}

type ListCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo       *Repo      `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	From       *Commit    `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         *Commit    `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Number     int64      `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	Reverse    bool       `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`                                                // Return commits oldest to newest
	All        bool       `protobuf:"varint,6,opt,name=all,proto3" json:"all,omitempty"`                                                        // Return commits of all kinds (without this, aliases are excluded)
	OriginKind OriginKind `protobuf:"varint,7,opt,name=origin_kind,json=originKind,proto3,enum=v1.pfs.OriginKind" json:"origin_kind,omitempty"` // Return only commits of this kind (mutually exclusive with all)
}

func (x *ListCommitRequest) Reset() {
	*x = ListCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitRequest) ProtoMessage() {}

func (x *ListCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitRequest.ProtoReflect.Descriptor instead.
func (*ListCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{20}
}

func (x *ListCommitRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ListCommitRequest) GetFrom() *Commit {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListCommitRequest) GetTo() *Commit {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ListCommitRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListCommitRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListCommitRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListCommitRequest) GetOriginKind() OriginKind {
	if x != nil {
		return x.OriginKind
	}
	return OriginKind_ORIGIN_KIND_UNKNOWN
}

type InspectCommitSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitSet *CommitSet `protobuf:"bytes,1,opt,name=commit_set,json=commitSet,proto3" json:"commit_set,omitempty"`
	Wait      bool       `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"` // When true, wait until all commits in the set are finished
}

func (x *InspectCommitSetRequest) Reset() {
	*x = InspectCommitSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectCommitSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectCommitSetRequest) ProtoMessage() {}

func (x *InspectCommitSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectCommitSetRequest.ProtoReflect.Descriptor instead.
func (*InspectCommitSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{21}
}

func (x *InspectCommitSetRequest) GetCommitSet() *CommitSet {
	if x != nil {
		return x.CommitSet
	}
	return nil
}

func (x *InspectCommitSetRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

type ListCommitSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCommitSetRequest) Reset() {
	*x = ListCommitSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitSetRequest) ProtoMessage() {}

func (x *ListCommitSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitSetRequest.ProtoReflect.Descriptor instead.
func (*ListCommitSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{22}
}

type SquashCommitSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitSet *CommitSet `protobuf:"bytes,1,opt,name=commit_set,json=commitSet,proto3" json:"commit_set,omitempty"`
}

func (x *SquashCommitSetRequest) Reset() {
	*x = SquashCommitSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquashCommitSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquashCommitSetRequest) ProtoMessage() {}

func (x *SquashCommitSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquashCommitSetRequest.ProtoReflect.Descriptor instead.
func (*SquashCommitSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{23}
}

func (x *SquashCommitSetRequest) GetCommitSet() *CommitSet {
	if x != nil {
		return x.CommitSet
	}
	return nil
}

type DropCommitSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitSet *CommitSet `protobuf:"bytes,1,opt,name=commit_set,json=commitSet,proto3" json:"commit_set,omitempty"`
}

func (x *DropCommitSetRequest) Reset() {
	*x = DropCommitSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCommitSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCommitSetRequest) ProtoMessage() {}

func (x *DropCommitSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCommitSetRequest.ProtoReflect.Descriptor instead.
func (*DropCommitSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{24}
}

func (x *DropCommitSetRequest) GetCommitSet() *CommitSet {
	if x != nil {
		return x.CommitSet
	}
	return nil
}

type SubscribeCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo   *Repo  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// only commits created since this commit are returned
	From *Commit `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Don't return commits until they're in (at least) the desired state.
	State      CommitState `protobuf:"varint,4,opt,name=state,proto3,enum=v1.pfs.CommitState" json:"state,omitempty"`
	All        bool        `protobuf:"varint,5,opt,name=all,proto3" json:"all,omitempty"`                                                        // Return commits of all kinds (without this, aliases are excluded)
	OriginKind OriginKind  `protobuf:"varint,6,opt,name=origin_kind,json=originKind,proto3,enum=v1.pfs.OriginKind" json:"origin_kind,omitempty"` // Return only commits of this kind (mutually exclusive with all)
}

func (x *SubscribeCommitRequest) Reset() {
	*x = SubscribeCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCommitRequest) ProtoMessage() {}

func (x *SubscribeCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCommitRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{25}
}

func (x *SubscribeCommitRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *SubscribeCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SubscribeCommitRequest) GetFrom() *Commit {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SubscribeCommitRequest) GetState() CommitState {
	if x != nil {
		return x.State
	}
	return CommitState_COMMIT_STATE_UNKNOWN
}

func (x *SubscribeCommitRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SubscribeCommitRequest) GetOriginKind() OriginKind {
	if x != nil {
		return x.OriginKind
	}
	return OriginKind_ORIGIN_KIND_UNKNOWN
}

type ClearCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *ClearCommitRequest) Reset() {
	*x = ClearCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearCommitRequest) ProtoMessage() {}

func (x *ClearCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearCommitRequest.ProtoReflect.Descriptor instead.
func (*ClearCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{26}
}

func (x *ClearCommitRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type CreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head         *Commit   `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Branch       *Branch   `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Provenance   []*Branch `protobuf:"bytes,3,rep,name=provenance,proto3" json:"provenance,omitempty"`
	Trigger      *Trigger  `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	NewCommitSet bool      `protobuf:"varint,5,opt,name=new_commit_set,json=newCommitSet,proto3" json:"new_commit_set,omitempty"` // overrides the default behavior of using the same CommitSet as 'head'
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{27}
}

func (x *CreateBranchRequest) GetHead() *Commit {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *CreateBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *CreateBranchRequest) GetProvenance() []*Branch {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *CreateBranchRequest) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CreateBranchRequest) GetNewCommitSet() bool {
	if x != nil {
		return x.NewCommitSet
	}
	return false
}

type InspectBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *InspectBranchRequest) Reset() {
	*x = InspectBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectBranchRequest) ProtoMessage() {}

func (x *InspectBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectBranchRequest.ProtoReflect.Descriptor instead.
func (*InspectBranchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{28}
}

func (x *InspectBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type ListBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo    *Repo `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Reverse bool  `protobuf:"varint,2,opt,name=reverse,proto3" json:"reverse,omitempty"` // Returns branches oldest to newest
}

func (x *ListBranchRequest) Reset() {
	*x = ListBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchRequest) ProtoMessage() {}

func (x *ListBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchRequest.ProtoReflect.Descriptor instead.
func (*ListBranchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{29}
}

func (x *ListBranchRequest) GetRepo() *Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ListBranchRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Force  bool    `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *DeleteBranchRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type AddFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Datum string `protobuf:"bytes,2,opt,name=datum,proto3" json:"datum,omitempty"`
	// Types that are assignable to Source:
	//	*AddFile_Raw
	//	*AddFile_Url
	Source isAddFile_Source `protobuf_oneof:"source"`
}

func (x *AddFile) Reset() {
	*x = AddFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFile) ProtoMessage() {}

func (x *AddFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFile.ProtoReflect.Descriptor instead.
func (*AddFile) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{31}
}

func (x *AddFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddFile) GetDatum() string {
	if x != nil {
		return x.Datum
	}
	return ""
}

func (m *AddFile) GetSource() isAddFile_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *AddFile) GetRaw() *wrapperspb.BytesValue {
	if x, ok := x.GetSource().(*AddFile_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *AddFile) GetUrl() *AddFile_URLSource {
	if x, ok := x.GetSource().(*AddFile_Url); ok {
		return x.Url
	}
	return nil
}

type isAddFile_Source interface {
	isAddFile_Source()
}

type AddFile_Raw struct {
	Raw *wrapperspb.BytesValue `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type AddFile_Url struct {
	Url *AddFile_URLSource `protobuf:"bytes,4,opt,name=url,proto3,oneof"`
}

func (*AddFile_Raw) isAddFile_Source() {}

func (*AddFile_Url) isAddFile_Source() {}

type DeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Datum string `protobuf:"bytes,2,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *DeleteFile) Reset() {
	*x = DeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFile) ProtoMessage() {}

func (x *DeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFile.ProtoReflect.Descriptor instead.
func (*DeleteFile) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeleteFile) GetDatum() string {
	if x != nil {
		return x.Datum
	}
	return ""
}

type CopyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dst    string `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Datum  string `protobuf:"bytes,2,opt,name=datum,proto3" json:"datum,omitempty"`
	Src    *File  `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Append bool   `protobuf:"varint,4,opt,name=append,proto3" json:"append,omitempty"`
}

func (x *CopyFile) Reset() {
	*x = CopyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFile) ProtoMessage() {}

func (x *CopyFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFile.ProtoReflect.Descriptor instead.
func (*CopyFile) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{33}
}

func (x *CopyFile) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *CopyFile) GetDatum() string {
	if x != nil {
		return x.Datum
	}
	return ""
}

func (x *CopyFile) GetSrc() *File {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CopyFile) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

type ModifyFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*ModifyFileRequest_SetCommit
	//	*ModifyFileRequest_AddFile
	//	*ModifyFileRequest_DeleteFile
	//	*ModifyFileRequest_CopyFile
	Body isModifyFileRequest_Body `protobuf_oneof:"body"`
}

func (x *ModifyFileRequest) Reset() {
	*x = ModifyFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFileRequest) ProtoMessage() {}

func (x *ModifyFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFileRequest.ProtoReflect.Descriptor instead.
func (*ModifyFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{34}
}

func (m *ModifyFileRequest) GetBody() isModifyFileRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *ModifyFileRequest) GetSetCommit() *Commit {
	if x, ok := x.GetBody().(*ModifyFileRequest_SetCommit); ok {
		return x.SetCommit
	}
	return nil
}

func (x *ModifyFileRequest) GetAddFile() *AddFile {
	if x, ok := x.GetBody().(*ModifyFileRequest_AddFile); ok {
		return x.AddFile
	}
	return nil
}

func (x *ModifyFileRequest) GetDeleteFile() *DeleteFile {
	if x, ok := x.GetBody().(*ModifyFileRequest_DeleteFile); ok {
		return x.DeleteFile
	}
	return nil
}

func (x *ModifyFileRequest) GetCopyFile() *CopyFile {
	if x, ok := x.GetBody().(*ModifyFileRequest_CopyFile); ok {
		return x.CopyFile
	}
	return nil
}

type isModifyFileRequest_Body interface {
	isModifyFileRequest_Body()
}

type ModifyFileRequest_SetCommit struct {
	SetCommit *Commit `protobuf:"bytes,1,opt,name=set_commit,json=setCommit,proto3,oneof"`
}

type ModifyFileRequest_AddFile struct {
	AddFile *AddFile `protobuf:"bytes,2,opt,name=add_file,json=addFile,proto3,oneof"`
}

type ModifyFileRequest_DeleteFile struct {
	DeleteFile *DeleteFile `protobuf:"bytes,3,opt,name=delete_file,json=deleteFile,proto3,oneof"`
}

type ModifyFileRequest_CopyFile struct {
	CopyFile *CopyFile `protobuf:"bytes,4,opt,name=copy_file,json=copyFile,proto3,oneof"`
}

func (*ModifyFileRequest_SetCommit) isModifyFileRequest_Body() {}

func (*ModifyFileRequest_AddFile) isModifyFileRequest_Body() {}

func (*ModifyFileRequest_DeleteFile) isModifyFileRequest_Body() {}

func (*ModifyFileRequest_CopyFile) isModifyFileRequest_Body() {}

type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	URL    string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	Offset int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{35}
}

func (x *GetFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *GetFileRequest) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *GetFileRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type InspectFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *InspectFileRequest) Reset() {
	*x = InspectFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectFileRequest) ProtoMessage() {}

func (x *InspectFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectFileRequest.ProtoReflect.Descriptor instead.
func (*InspectFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{36}
}

func (x *InspectFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type ListFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File is the parent directory of the files we want to list. This sets the
	// repo, the commit/branch, and path prefix of files we're interested in
	// If the "path" field is omitted, a list of files at the top level of the repo
	// is returned
	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *ListFileRequest) Reset() {
	*x = ListFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileRequest) ProtoMessage() {}

func (x *ListFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileRequest.ProtoReflect.Descriptor instead.
func (*ListFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{37}
}

func (x *ListFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type WalkFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *WalkFileRequest) Reset() {
	*x = WalkFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalkFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalkFileRequest) ProtoMessage() {}

func (x *WalkFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalkFileRequest.ProtoReflect.Descriptor instead.
func (*WalkFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{38}
}

func (x *WalkFileRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type GlobFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit  *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Pattern string  `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *GlobFileRequest) Reset() {
	*x = GlobFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobFileRequest) ProtoMessage() {}

func (x *GlobFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobFileRequest.ProtoReflect.Descriptor instead.
func (*GlobFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{39}
}

func (x *GlobFileRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *GlobFileRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type DiffFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewFile *File `protobuf:"bytes,1,opt,name=new_file,json=newFile,proto3" json:"new_file,omitempty"`
	// OldFile may be left nil in which case the same path in the parent of
	// NewFile's commit will be used.
	OldFile *File `protobuf:"bytes,2,opt,name=old_file,json=oldFile,proto3" json:"old_file,omitempty"`
	Shallow bool  `protobuf:"varint,3,opt,name=shallow,proto3" json:"shallow,omitempty"`
}

func (x *DiffFileRequest) Reset() {
	*x = DiffFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffFileRequest) ProtoMessage() {}

func (x *DiffFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffFileRequest.ProtoReflect.Descriptor instead.
func (*DiffFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{40}
}

func (x *DiffFileRequest) GetNewFile() *File {
	if x != nil {
		return x.NewFile
	}
	return nil
}

func (x *DiffFileRequest) GetOldFile() *File {
	if x != nil {
		return x.OldFile
	}
	return nil
}

func (x *DiffFileRequest) GetShallow() bool {
	if x != nil {
		return x.Shallow
	}
	return false
}

type DiffFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewFile *FileInfo `protobuf:"bytes,1,opt,name=new_file,json=newFile,proto3" json:"new_file,omitempty"`
	OldFile *FileInfo `protobuf:"bytes,2,opt,name=old_file,json=oldFile,proto3" json:"old_file,omitempty"`
}

func (x *DiffFileResponse) Reset() {
	*x = DiffFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffFileResponse) ProtoMessage() {}

func (x *DiffFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffFileResponse.ProtoReflect.Descriptor instead.
func (*DiffFileResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{41}
}

func (x *DiffFileResponse) GetNewFile() *FileInfo {
	if x != nil {
		return x.NewFile
	}
	return nil
}

func (x *DiffFileResponse) GetOldFile() *FileInfo {
	if x != nil {
		return x.OldFile
	}
	return nil
}

type FsckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fix bool `protobuf:"varint,1,opt,name=fix,proto3" json:"fix,omitempty"`
}

func (x *FsckRequest) Reset() {
	*x = FsckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsckRequest) ProtoMessage() {}

func (x *FsckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsckRequest.ProtoReflect.Descriptor instead.
func (*FsckRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{42}
}

func (x *FsckRequest) GetFix() bool {
	if x != nil {
		return x.Fix
	}
	return false
}

type FsckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fix   string `protobuf:"bytes,1,opt,name=fix,proto3" json:"fix,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FsckResponse) Reset() {
	*x = FsckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsckResponse) ProtoMessage() {}

func (x *FsckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsckResponse.ProtoReflect.Descriptor instead.
func (*FsckResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{43}
}

func (x *FsckResponse) GetFix() string {
	if x != nil {
		return x.Fix
	}
	return ""
}

func (x *FsckResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CreateFileSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSetId string `protobuf:"bytes,1,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
}

func (x *CreateFileSetResponse) Reset() {
	*x = CreateFileSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileSetResponse) ProtoMessage() {}

func (x *CreateFileSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileSetResponse.ProtoReflect.Descriptor instead.
func (*CreateFileSetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{44}
}

func (x *CreateFileSetResponse) GetFileSetId() string {
	if x != nil {
		return x.FileSetId
	}
	return ""
}

type GetFileSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GetFileSetRequest) Reset() {
	*x = GetFileSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileSetRequest) ProtoMessage() {}

func (x *GetFileSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileSetRequest.ProtoReflect.Descriptor instead.
func (*GetFileSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{45}
}

func (x *GetFileSetRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type AddFileSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit    *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	FileSetId string  `protobuf:"bytes,2,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
}

func (x *AddFileSetRequest) Reset() {
	*x = AddFileSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileSetRequest) ProtoMessage() {}

func (x *AddFileSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileSetRequest.ProtoReflect.Descriptor instead.
func (*AddFileSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{46}
}

func (x *AddFileSetRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *AddFileSetRequest) GetFileSetId() string {
	if x != nil {
		return x.FileSetId
	}
	return ""
}

type RenewFileSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSetId  string `protobuf:"bytes,1,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	TtlSeconds int64  `protobuf:"varint,2,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *RenewFileSetRequest) Reset() {
	*x = RenewFileSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewFileSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewFileSetRequest) ProtoMessage() {}

func (x *RenewFileSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewFileSetRequest.ProtoReflect.Descriptor instead.
func (*RenewFileSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{47}
}

func (x *RenewFileSetRequest) GetFileSetId() string {
	if x != nil {
		return x.FileSetId
	}
	return ""
}

func (x *RenewFileSetRequest) GetTtlSeconds() int64 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

type ComposeFileSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSetIds []string `protobuf:"bytes,1,rep,name=file_set_ids,json=fileSetIds,proto3" json:"file_set_ids,omitempty"`
	TtlSeconds int64    `protobuf:"varint,2,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *ComposeFileSetRequest) Reset() {
	*x = ComposeFileSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFileSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFileSetRequest) ProtoMessage() {}

func (x *ComposeFileSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFileSetRequest.ProtoReflect.Descriptor instead.
func (*ComposeFileSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{48}
}

func (x *ComposeFileSetRequest) GetFileSetIds() []string {
	if x != nil {
		return x.FileSetIds
	}
	return nil
}

func (x *ComposeFileSetRequest) GetTtlSeconds() int64 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

type CheckStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadChunkData bool   `protobuf:"varint,1,opt,name=read_chunk_data,json=readChunkData,proto3" json:"read_chunk_data,omitempty"`
	ChunkBegin    []byte `protobuf:"bytes,2,opt,name=chunk_begin,json=chunkBegin,proto3" json:"chunk_begin,omitempty"`
	ChunkEnd      []byte `protobuf:"bytes,3,opt,name=chunk_end,json=chunkEnd,proto3" json:"chunk_end,omitempty"`
}

func (x *CheckStorageRequest) Reset() {
	*x = CheckStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStorageRequest) ProtoMessage() {}

func (x *CheckStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStorageRequest.ProtoReflect.Descriptor instead.
func (*CheckStorageRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{49}
}

func (x *CheckStorageRequest) GetReadChunkData() bool {
	if x != nil {
		return x.ReadChunkData
	}
	return false
}

func (x *CheckStorageRequest) GetChunkBegin() []byte {
	if x != nil {
		return x.ChunkBegin
	}
	return nil
}

func (x *CheckStorageRequest) GetChunkEnd() []byte {
	if x != nil {
		return x.ChunkEnd
	}
	return nil
}

type CheckStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkObjectCount int64 `protobuf:"varint,1,opt,name=chunk_object_count,json=chunkObjectCount,proto3" json:"chunk_object_count,omitempty"`
}

func (x *CheckStorageResponse) Reset() {
	*x = CheckStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStorageResponse) ProtoMessage() {}

func (x *CheckStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStorageResponse.ProtoReflect.Descriptor instead.
func (*CheckStorageResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{50}
}

func (x *CheckStorageResponse) GetChunkObjectCount() int64 {
	if x != nil {
		return x.ChunkObjectCount
	}
	return 0
}

type PutCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value      *anypb.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	FileSetIds []string   `protobuf:"bytes,3,rep,name=file_set_ids,json=fileSetIds,proto3" json:"file_set_ids,omitempty"`
	Tag        string     `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PutCacheRequest) Reset() {
	*x = PutCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCacheRequest) ProtoMessage() {}

func (x *PutCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCacheRequest.ProtoReflect.Descriptor instead.
func (*PutCacheRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{51}
}

func (x *PutCacheRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutCacheRequest) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutCacheRequest) GetFileSetIds() []string {
	if x != nil {
		return x.FileSetIds
	}
	return nil
}

func (x *PutCacheRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type GetCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetCacheRequest) Reset() {
	*x = GetCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheRequest) ProtoMessage() {}

func (x *GetCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheRequest.ProtoReflect.Descriptor instead.
func (*GetCacheRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{52}
}

func (x *GetCacheRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *anypb.Any `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetCacheResponse) Reset() {
	*x = GetCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheResponse) ProtoMessage() {}

func (x *GetCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheResponse.ProtoReflect.Descriptor instead.
func (*GetCacheResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{53}
}

func (x *GetCacheResponse) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type ClearCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagPrefix string `protobuf:"bytes,1,opt,name=tag_prefix,json=tagPrefix,proto3" json:"tag_prefix,omitempty"`
}

func (x *ClearCacheRequest) Reset() {
	*x = ClearCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearCacheRequest) ProtoMessage() {}

func (x *ClearCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearCacheRequest.ProtoReflect.Descriptor instead.
func (*ClearCacheRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{54}
}

func (x *ClearCacheRequest) GetTagPrefix() string {
	if x != nil {
		return x.TagPrefix
	}
	return ""
}

type ActivateAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAuthRequest) Reset() {
	*x = ActivateAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAuthRequest) ProtoMessage() {}

func (x *ActivateAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAuthRequest.ProtoReflect.Descriptor instead.
func (*ActivateAuthRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{55}
}

type ActivateAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAuthResponse) Reset() {
	*x = ActivateAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAuthResponse) ProtoMessage() {}

func (x *ActivateAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAuthResponse.ProtoReflect.Descriptor instead.
func (*ActivateAuthResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{56}
}

type RunLoadTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   string  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Branch *Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Seed   int64   `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *RunLoadTestRequest) Reset() {
	*x = RunLoadTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadTestRequest) ProtoMessage() {}

func (x *RunLoadTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadTestRequest.ProtoReflect.Descriptor instead.
func (*RunLoadTestRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{57}
}

func (x *RunLoadTestRequest) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *RunLoadTestRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *RunLoadTestRequest) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

type RunLoadTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec     string               `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Branch   *Branch              `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Seed     int64                `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	Error    string               `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RunLoadTestResponse) Reset() {
	*x = RunLoadTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadTestResponse) ProtoMessage() {}

func (x *RunLoadTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadTestResponse.ProtoReflect.Descriptor instead.
func (*RunLoadTestResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{58}
}

func (x *RunLoadTestResponse) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *RunLoadTestResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *RunLoadTestResponse) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *RunLoadTestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunLoadTestResponse) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type ObjectStorageEgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ObjectStorageEgress) Reset() {
	*x = ObjectStorageEgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStorageEgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorageEgress) ProtoMessage() {}

func (x *ObjectStorageEgress) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorageEgress.ProtoReflect.Descriptor instead.
func (*ObjectStorageEgress) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{59}
}

func (x *ObjectStorageEgress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SQLDatabaseEgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string                        `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	FileFormat *SQLDatabaseEgress_FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	Secret     *SQLDatabaseEgress_Secret     `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *SQLDatabaseEgress) Reset() {
	*x = SQLDatabaseEgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLDatabaseEgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLDatabaseEgress) ProtoMessage() {}

func (x *SQLDatabaseEgress) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLDatabaseEgress.ProtoReflect.Descriptor instead.
func (*SQLDatabaseEgress) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{60}
}

func (x *SQLDatabaseEgress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SQLDatabaseEgress) GetFileFormat() *SQLDatabaseEgress_FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *SQLDatabaseEgress) GetSecret() *SQLDatabaseEgress_Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

type EgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// Types that are assignable to Target:
	//	*EgressRequest_ObjectStorage
	//	*EgressRequest_SqlDatabase
	Target isEgressRequest_Target `protobuf_oneof:"target"`
}

func (x *EgressRequest) Reset() {
	*x = EgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressRequest) ProtoMessage() {}

func (x *EgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressRequest.ProtoReflect.Descriptor instead.
func (*EgressRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{61}
}

func (x *EgressRequest) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (m *EgressRequest) GetTarget() isEgressRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *EgressRequest) GetObjectStorage() *ObjectStorageEgress {
	if x, ok := x.GetTarget().(*EgressRequest_ObjectStorage); ok {
		return x.ObjectStorage
	}
	return nil
}

func (x *EgressRequest) GetSqlDatabase() *SQLDatabaseEgress {
	if x, ok := x.GetTarget().(*EgressRequest_SqlDatabase); ok {
		return x.SqlDatabase
	}
	return nil
}

type isEgressRequest_Target interface {
	isEgressRequest_Target()
}

type EgressRequest_ObjectStorage struct {
	ObjectStorage *ObjectStorageEgress `protobuf:"bytes,2,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type EgressRequest_SqlDatabase struct {
	SqlDatabase *SQLDatabaseEgress `protobuf:"bytes,3,opt,name=sql_database,json=sqlDatabase,proto3,oneof"`
}

func (*EgressRequest_ObjectStorage) isEgressRequest_Target() {}

func (*EgressRequest_SqlDatabase) isEgressRequest_Target() {}

type EgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*EgressResponse_ObjectStorage
	//	*EgressResponse_SqlDatabase
	Result isEgressResponse_Result `protobuf_oneof:"result"`
}

func (x *EgressResponse) Reset() {
	*x = EgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressResponse) ProtoMessage() {}

func (x *EgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressResponse.ProtoReflect.Descriptor instead.
func (*EgressResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{62}
}

func (m *EgressResponse) GetResult() isEgressResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *EgressResponse) GetObjectStorage() *EgressResponse_ObjectStorageResult {
	if x, ok := x.GetResult().(*EgressResponse_ObjectStorage); ok {
		return x.ObjectStorage
	}
	return nil
}

func (x *EgressResponse) GetSqlDatabase() *EgressResponse_SQLDatabaseResult {
	if x, ok := x.GetResult().(*EgressResponse_SqlDatabase); ok {
		return x.SqlDatabase
	}
	return nil
}

type isEgressResponse_Result interface {
	isEgressResponse_Result()
}

type EgressResponse_ObjectStorage struct {
	ObjectStorage *EgressResponse_ObjectStorageResult `protobuf:"bytes,1,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type EgressResponse_SqlDatabase struct {
	SqlDatabase *EgressResponse_SQLDatabaseResult `protobuf:"bytes,2,opt,name=sql_database,json=sqlDatabase,proto3,oneof"`
}

func (*EgressResponse_ObjectStorage) isEgressResponse_Result() {}

func (*EgressResponse_SqlDatabase) isEgressResponse_Result() {}

// Details are only provided when explicitly requested
type RepoInfo_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeBytes int64 `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (x *RepoInfo_Details) Reset() {
	*x = RepoInfo_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoInfo_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoInfo_Details) ProtoMessage() {}

func (x *RepoInfo_Details) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoInfo_Details.ProtoReflect.Descriptor instead.
func (*RepoInfo_Details) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RepoInfo_Details) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

// Details are only provided when explicitly requested
type CommitInfo_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeBytes      int64                `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	CompactingTime *durationpb.Duration `protobuf:"bytes,2,opt,name=compacting_time,json=compactingTime,proto3" json:"compacting_time,omitempty"`
	ValidatingTime *durationpb.Duration `protobuf:"bytes,3,opt,name=validating_time,json=validatingTime,proto3" json:"validating_time,omitempty"`
}

func (x *CommitInfo_Details) Reset() {
	*x = CommitInfo_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitInfo_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfo_Details) ProtoMessage() {}

func (x *CommitInfo_Details) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfo_Details.ProtoReflect.Descriptor instead.
func (*CommitInfo_Details) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CommitInfo_Details) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *CommitInfo_Details) GetCompactingTime() *durationpb.Duration {
	if x != nil {
		return x.CompactingTime
	}
	return nil
}

func (x *CommitInfo_Details) GetValidatingTime() *durationpb.Duration {
	if x != nil {
		return x.ValidatingTime
	}
	return nil
}

type AddFile_URLSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL       string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	Recursive bool   `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *AddFile_URLSource) Reset() {
	*x = AddFile_URLSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFile_URLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFile_URLSource) ProtoMessage() {}

func (x *AddFile_URLSource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFile_URLSource.ProtoReflect.Descriptor instead.
func (*AddFile_URLSource) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{31, 0}
}

func (x *AddFile_URLSource) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *AddFile_URLSource) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type SQLDatabaseEgress_FileFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    SQLDatabaseEgress_FileFormat_Type `protobuf:"varint,1,opt,name=type,proto3,enum=v1.pfs.SQLDatabaseEgress_FileFormat_Type" json:"type,omitempty"`
	Columns []string                          `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *SQLDatabaseEgress_FileFormat) Reset() {
	*x = SQLDatabaseEgress_FileFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLDatabaseEgress_FileFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLDatabaseEgress_FileFormat) ProtoMessage() {}

func (x *SQLDatabaseEgress_FileFormat) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLDatabaseEgress_FileFormat.ProtoReflect.Descriptor instead.
func (*SQLDatabaseEgress_FileFormat) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{60, 0}
}

func (x *SQLDatabaseEgress_FileFormat) GetType() SQLDatabaseEgress_FileFormat_Type {
	if x != nil {
		return x.Type
	}
	return SQLDatabaseEgress_FileFormat_UNKNOWN
}

func (x *SQLDatabaseEgress_FileFormat) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type SQLDatabaseEgress_Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SQLDatabaseEgress_Secret) Reset() {
	*x = SQLDatabaseEgress_Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLDatabaseEgress_Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLDatabaseEgress_Secret) ProtoMessage() {}

func (x *SQLDatabaseEgress_Secret) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLDatabaseEgress_Secret.ProtoReflect.Descriptor instead.
func (*SQLDatabaseEgress_Secret) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{60, 1}
}

func (x *SQLDatabaseEgress_Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLDatabaseEgress_Secret) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type EgressResponse_ObjectStorageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesWritten int64 `protobuf:"varint,1,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
}

func (x *EgressResponse_ObjectStorageResult) Reset() {
	*x = EgressResponse_ObjectStorageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressResponse_ObjectStorageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressResponse_ObjectStorageResult) ProtoMessage() {}

func (x *EgressResponse_ObjectStorageResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressResponse_ObjectStorageResult.ProtoReflect.Descriptor instead.
func (*EgressResponse_ObjectStorageResult) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{62, 0}
}

func (x *EgressResponse_ObjectStorageResult) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

type EgressResponse_SQLDatabaseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsWritten map[string]int64 `protobuf:"bytes,1,rep,name=rows_written,json=rowsWritten,proto3" json:"rows_written,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EgressResponse_SQLDatabaseResult) Reset() {
	*x = EgressResponse_SQLDatabaseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressResponse_SQLDatabaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressResponse_SQLDatabaseResult) ProtoMessage() {}

func (x *EgressResponse_SQLDatabaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_pfs_pfs_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressResponse_SQLDatabaseResult.ProtoReflect.Descriptor instead.
func (*EgressResponse_SQLDatabaseResult) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP(), []int{62, 1}
}

func (x *EgressResponse_SQLDatabaseResult) GetRowsWritten() map[string]int64 {
	if x != nil {
		return x.RowsWritten
	}
	return nil
}

var File_pkg_api_v1_pfs_pfs_proto protoreflect.FileDescriptor

var file_pkg_api_v1_pfs_pfs_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x66, 0x73,
	0x2f, 0x70, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x04, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x98, 0xa0, 0x1f, 0x00, 0x22,
	0x44, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x04, 0x98, 0xa0, 0x1f, 0x00, 0x22, 0x58, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x22,
	0xf6, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x28,
	0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x10, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x4e, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x98, 0xa0, 0x1f, 0x00,
	0x22, 0x87, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x0d,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x11, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x6f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0xc8, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x6f, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x12,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x67, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x5f, 0x0a,
	0x17, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0x16,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x71, 0x75, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x22, 0x48, 0x0a, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x22, 0xe8, 0x01, 0x0a,
	0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x14, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x4f, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0xda, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x52, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3b, 0x0a, 0x09, 0x55, 0x52, 0x4c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x36, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x22, 0x6a, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x36, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6b, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x0f,
	0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x22, 0x7d, 0x0a, 0x0f, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x22, 0x6c, 0x0a, 0x10, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x1f,
	0x0a, 0x0b, 0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x66, 0x69, 0x78, 0x22,
	0x36, 0x0a, 0x0c, 0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x37, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x13, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x7b,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x23, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3e, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x11,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x64, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x13, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xf3, 0x02, 0x0a, 0x11, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x53, 0x51, 0x4c, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x9a, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x10, 0x03, 0x1a, 0x2e, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x71, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x0e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x73,
	0x71, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x3a, 0x0a, 0x13, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x1a, 0xb1, 0x01, 0x0a, 0x11, 0x53, 0x51, 0x4c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x0c,
	0x72, 0x6f, 0x77, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x6f, 0x77,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72,
	0x6f, 0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x6f,
	0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2a, 0x4e, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x53, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x10, 0x04, 0x2a, 0x2b, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x52, 0x10,
	0x02, 0x2a, 0x5c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0x3b, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x51,
	0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x04, 0x32, 0xba, 0x16, 0x0a,
	0x03, 0x41, 0x50, 0x49, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0d, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x53, 0x71, 0x75, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x53, 0x71, 0x75, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x41, 0x52, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x57, 0x61, 0x6c,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x57,
	0x61, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x41, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x04, 0x46, 0x73, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x46, 0x73, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x66, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x50, 0x75, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x52, 0x75,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x66, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52,
	0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39,
	0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66,
	0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x66, 0x73, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x6f, 0x6a, 0x70, 0x75, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x66, 0x73, 0x3b, 0x70, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_v1_pfs_pfs_proto_rawDescOnce sync.Once
	file_pkg_api_v1_pfs_pfs_proto_rawDescData = file_pkg_api_v1_pfs_pfs_proto_rawDesc
)

func file_pkg_api_v1_pfs_pfs_proto_rawDescGZIP() []byte {
	file_pkg_api_v1_pfs_pfs_proto_rawDescOnce.Do(func() {
		file_pkg_api_v1_pfs_pfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v1_pfs_pfs_proto_rawDescData)
	})
	return file_pkg_api_v1_pfs_pfs_proto_rawDescData
}

var file_pkg_api_v1_pfs_pfs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_pkg_api_v1_pfs_pfs_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_pkg_api_v1_pfs_pfs_proto_goTypes = []interface{}{
	(OriginKind)(0),                            // 0: v1.pfs.OriginKind
	(FileType)(0),                              // 1: v1.pfs.FileType
	(CommitState)(0),                           // 2: v1.pfs.CommitState
	(Delimiter)(0),                             // 3: v1.pfs.Delimiter
	(SQLDatabaseEgress_FileFormat_Type)(0),     // 4: v1.pfs.SQLDatabaseEgress.FileFormat.Type
	(*Repo)(nil),                               // 5: v1.pfs.Repo
	(*Branch)(nil),                             // 6: v1.pfs.Branch
	(*File)(nil),                               // 7: v1.pfs.File
	(*RepoInfo)(nil),                           // 8: v1.pfs.RepoInfo
	(*RepoAuthInfo)(nil),                       // 9: v1.pfs.RepoAuthInfo
	(*BranchInfo)(nil),                         // 10: v1.pfs.BranchInfo
	(*Trigger)(nil),                            // 11: v1.pfs.Trigger
	(*CommitOrigin)(nil),                       // 12: v1.pfs.CommitOrigin
	(*Commit)(nil),                             // 13: v1.pfs.Commit
	(*CommitInfo)(nil),                         // 14: v1.pfs.CommitInfo
	(*CommitSet)(nil),                          // 15: v1.pfs.CommitSet
	(*CommitSetInfo)(nil),                      // 16: v1.pfs.CommitSetInfo
	(*FileInfo)(nil),                           // 17: v1.pfs.FileInfo
	(*CreateRepoRequest)(nil),                  // 18: v1.pfs.CreateRepoRequest
	(*InspectRepoRequest)(nil),                 // 19: v1.pfs.InspectRepoRequest
	(*ListRepoRequest)(nil),                    // 20: v1.pfs.ListRepoRequest
	(*DeleteRepoRequest)(nil),                  // 21: v1.pfs.DeleteRepoRequest
	(*StartCommitRequest)(nil),                 // 22: v1.pfs.StartCommitRequest
	(*FinishCommitRequest)(nil),                // 23: v1.pfs.FinishCommitRequest
	(*InspectCommitRequest)(nil),               // 24: v1.pfs.InspectCommitRequest
	(*ListCommitRequest)(nil),                  // 25: v1.pfs.ListCommitRequest
	(*InspectCommitSetRequest)(nil),            // 26: v1.pfs.InspectCommitSetRequest
	(*ListCommitSetRequest)(nil),               // 27: v1.pfs.ListCommitSetRequest
	(*SquashCommitSetRequest)(nil),             // 28: v1.pfs.SquashCommitSetRequest
	(*DropCommitSetRequest)(nil),               // 29: v1.pfs.DropCommitSetRequest
	(*SubscribeCommitRequest)(nil),             // 30: v1.pfs.SubscribeCommitRequest
	(*ClearCommitRequest)(nil),                 // 31: v1.pfs.ClearCommitRequest
	(*CreateBranchRequest)(nil),                // 32: v1.pfs.CreateBranchRequest
	(*InspectBranchRequest)(nil),               // 33: v1.pfs.InspectBranchRequest
	(*ListBranchRequest)(nil),                  // 34: v1.pfs.ListBranchRequest
	(*DeleteBranchRequest)(nil),                // 35: v1.pfs.DeleteBranchRequest
	(*AddFile)(nil),                            // 36: v1.pfs.AddFile
	(*DeleteFile)(nil),                         // 37: v1.pfs.DeleteFile
	(*CopyFile)(nil),                           // 38: v1.pfs.CopyFile
	(*ModifyFileRequest)(nil),                  // 39: v1.pfs.ModifyFileRequest
	(*GetFileRequest)(nil),                     // 40: v1.pfs.GetFileRequest
	(*InspectFileRequest)(nil),                 // 41: v1.pfs.InspectFileRequest
	(*ListFileRequest)(nil),                    // 42: v1.pfs.ListFileRequest
	(*WalkFileRequest)(nil),                    // 43: v1.pfs.WalkFileRequest
	(*GlobFileRequest)(nil),                    // 44: v1.pfs.GlobFileRequest
	(*DiffFileRequest)(nil),                    // 45: v1.pfs.DiffFileRequest
	(*DiffFileResponse)(nil),                   // 46: v1.pfs.DiffFileResponse
	(*FsckRequest)(nil),                        // 47: v1.pfs.FsckRequest
	(*FsckResponse)(nil),                       // 48: v1.pfs.FsckResponse
	(*CreateFileSetResponse)(nil),              // 49: v1.pfs.CreateFileSetResponse
	(*GetFileSetRequest)(nil),                  // 50: v1.pfs.GetFileSetRequest
	(*AddFileSetRequest)(nil),                  // 51: v1.pfs.AddFileSetRequest
	(*RenewFileSetRequest)(nil),                // 52: v1.pfs.RenewFileSetRequest
	(*ComposeFileSetRequest)(nil),              // 53: v1.pfs.ComposeFileSetRequest
	(*CheckStorageRequest)(nil),                // 54: v1.pfs.CheckStorageRequest
	(*CheckStorageResponse)(nil),               // 55: v1.pfs.CheckStorageResponse
	(*PutCacheRequest)(nil),                    // 56: v1.pfs.PutCacheRequest
	(*GetCacheRequest)(nil),                    // 57: v1.pfs.GetCacheRequest
	(*GetCacheResponse)(nil),                   // 58: v1.pfs.GetCacheResponse
	(*ClearCacheRequest)(nil),                  // 59: v1.pfs.ClearCacheRequest
	(*ActivateAuthRequest)(nil),                // 60: v1.pfs.ActivateAuthRequest
	(*ActivateAuthResponse)(nil),               // 61: v1.pfs.ActivateAuthResponse
	(*RunLoadTestRequest)(nil),                 // 62: v1.pfs.RunLoadTestRequest
	(*RunLoadTestResponse)(nil),                // 63: v1.pfs.RunLoadTestResponse
	(*ObjectStorageEgress)(nil),                // 64: v1.pfs.ObjectStorageEgress
	(*SQLDatabaseEgress)(nil),                  // 65: v1.pfs.SQLDatabaseEgress
	(*EgressRequest)(nil),                      // 66: v1.pfs.EgressRequest
	(*EgressResponse)(nil),                     // 67: v1.pfs.EgressResponse
	(*RepoInfo_Details)(nil),                   // 68: v1.pfs.RepoInfo.Details
	(*CommitInfo_Details)(nil),                 // 69: v1.pfs.CommitInfo.Details
	(*AddFile_URLSource)(nil),                  // 70: v1.pfs.AddFile.URLSource
	(*SQLDatabaseEgress_FileFormat)(nil),       // 71: v1.pfs.SQLDatabaseEgress.FileFormat
	(*SQLDatabaseEgress_Secret)(nil),           // 72: v1.pfs.SQLDatabaseEgress.Secret
	(*EgressResponse_ObjectStorageResult)(nil), // 73: v1.pfs.EgressResponse.ObjectStorageResult
	(*EgressResponse_SQLDatabaseResult)(nil),   // 74: v1.pfs.EgressResponse.SQLDatabaseResult
	nil,                                        // 75: v1.pfs.EgressResponse.SQLDatabaseResult.RowsWrittenEntry
	(*timestamppb.Timestamp)(nil),              // 76: google.protobuf.Timestamp
	(auth.Permission)(0),                       // 77: v1.auth.Permission
	(*wrapperspb.BytesValue)(nil),              // 78: google.protobuf.BytesValue
	(*anypb.Any)(nil),                          // 79: google.protobuf.Any
	(*durationpb.Duration)(nil),                // 80: google.protobuf.Duration
	(*emptypb.Empty)(nil),                      // 81: google.protobuf.Empty
	(*task.ListTaskRequest)(nil),               // 82: v1.task.ListTaskRequest
	(*task.TaskInfo)(nil),                      // 83: v1.task.TaskInfo
}
var file_pkg_api_v1_pfs_pfs_proto_depIdxs = []int32{
	5,   // 0: v1.pfs.Branch.repo:type_name -> v1.pfs.Repo
	13,  // 1: v1.pfs.File.commit:type_name -> v1.pfs.Commit
	5,   // 2: v1.pfs.RepoInfo.repo:type_name -> v1.pfs.Repo
	76,  // 3: v1.pfs.RepoInfo.created:type_name -> google.protobuf.Timestamp
	6,   // 4: v1.pfs.RepoInfo.branches:type_name -> v1.pfs.Branch
	9,   // 5: v1.pfs.RepoInfo.auth_info:type_name -> v1.pfs.RepoAuthInfo
	68,  // 6: v1.pfs.RepoInfo.details:type_name -> v1.pfs.RepoInfo.Details
	77,  // 7: v1.pfs.RepoAuthInfo.permissions:type_name -> v1.auth.Permission
	6,   // 8: v1.pfs.BranchInfo.branch:type_name -> v1.pfs.Branch
	13,  // 9: v1.pfs.BranchInfo.head:type_name -> v1.pfs.Commit
	6,   // 10: v1.pfs.BranchInfo.provenance:type_name -> v1.pfs.Branch
	6,   // 11: v1.pfs.BranchInfo.subvenance:type_name -> v1.pfs.Branch
	6,   // 12: v1.pfs.BranchInfo.direct_provenance:type_name -> v1.pfs.Branch
	11,  // 13: v1.pfs.BranchInfo.trigger:type_name -> v1.pfs.Trigger
	0,   // 14: v1.pfs.CommitOrigin.kind:type_name -> v1.pfs.OriginKind
	6,   // 15: v1.pfs.Commit.branch:type_name -> v1.pfs.Branch
	13,  // 16: v1.pfs.CommitInfo.commit:type_name -> v1.pfs.Commit
	12,  // 17: v1.pfs.CommitInfo.origin:type_name -> v1.pfs.CommitOrigin
	13,  // 18: v1.pfs.CommitInfo.parent_commit:type_name -> v1.pfs.Commit
	13,  // 19: v1.pfs.CommitInfo.child_commits:type_name -> v1.pfs.Commit
	76,  // 20: v1.pfs.CommitInfo.started:type_name -> google.protobuf.Timestamp
	76,  // 21: v1.pfs.CommitInfo.finishing:type_name -> google.protobuf.Timestamp
	76,  // 22: v1.pfs.CommitInfo.finished:type_name -> google.protobuf.Timestamp
	6,   // 23: v1.pfs.CommitInfo.direct_provenance:type_name -> v1.pfs.Branch
	69,  // 24: v1.pfs.CommitInfo.details:type_name -> v1.pfs.CommitInfo.Details
	15,  // 25: v1.pfs.CommitSetInfo.commit_set:type_name -> v1.pfs.CommitSet
	14,  // 26: v1.pfs.CommitSetInfo.commits:type_name -> v1.pfs.CommitInfo
	7,   // 27: v1.pfs.FileInfo.file:type_name -> v1.pfs.File
	1,   // 28: v1.pfs.FileInfo.file_type:type_name -> v1.pfs.FileType
	76,  // 29: v1.pfs.FileInfo.committed:type_name -> google.protobuf.Timestamp
	5,   // 30: v1.pfs.CreateRepoRequest.repo:type_name -> v1.pfs.Repo
	5,   // 31: v1.pfs.InspectRepoRequest.repo:type_name -> v1.pfs.Repo
	5,   // 32: v1.pfs.DeleteRepoRequest.repo:type_name -> v1.pfs.Repo
	13,  // 33: v1.pfs.StartCommitRequest.parent:type_name -> v1.pfs.Commit
	6,   // 34: v1.pfs.StartCommitRequest.branch:type_name -> v1.pfs.Branch
	13,  // 35: v1.pfs.FinishCommitRequest.commit:type_name -> v1.pfs.Commit
	13,  // 36: v1.pfs.InspectCommitRequest.commit:type_name -> v1.pfs.Commit
	2,   // 37: v1.pfs.InspectCommitRequest.wait:type_name -> v1.pfs.CommitState
	5,   // 38: v1.pfs.ListCommitRequest.repo:type_name -> v1.pfs.Repo
	13,  // 39: v1.pfs.ListCommitRequest.from:type_name -> v1.pfs.Commit
	13,  // 40: v1.pfs.ListCommitRequest.to:type_name -> v1.pfs.Commit
	0,   // 41: v1.pfs.ListCommitRequest.origin_kind:type_name -> v1.pfs.OriginKind
	15,  // 42: v1.pfs.InspectCommitSetRequest.commit_set:type_name -> v1.pfs.CommitSet
	15,  // 43: v1.pfs.SquashCommitSetRequest.commit_set:type_name -> v1.pfs.CommitSet
	15,  // 44: v1.pfs.DropCommitSetRequest.commit_set:type_name -> v1.pfs.CommitSet
	5,   // 45: v1.pfs.SubscribeCommitRequest.repo:type_name -> v1.pfs.Repo
	13,  // 46: v1.pfs.SubscribeCommitRequest.from:type_name -> v1.pfs.Commit
	2,   // 47: v1.pfs.SubscribeCommitRequest.state:type_name -> v1.pfs.CommitState
	0,   // 48: v1.pfs.SubscribeCommitRequest.origin_kind:type_name -> v1.pfs.OriginKind
	13,  // 49: v1.pfs.ClearCommitRequest.commit:type_name -> v1.pfs.Commit
	13,  // 50: v1.pfs.CreateBranchRequest.head:type_name -> v1.pfs.Commit
	6,   // 51: v1.pfs.CreateBranchRequest.branch:type_name -> v1.pfs.Branch
	6,   // 52: v1.pfs.CreateBranchRequest.provenance:type_name -> v1.pfs.Branch
	11,  // 53: v1.pfs.CreateBranchRequest.trigger:type_name -> v1.pfs.Trigger
	6,   // 54: v1.pfs.InspectBranchRequest.branch:type_name -> v1.pfs.Branch
	5,   // 55: v1.pfs.ListBranchRequest.repo:type_name -> v1.pfs.Repo
	6,   // 56: v1.pfs.DeleteBranchRequest.branch:type_name -> v1.pfs.Branch
	78,  // 57: v1.pfs.AddFile.raw:type_name -> google.protobuf.BytesValue
	70,  // 58: v1.pfs.AddFile.url:type_name -> v1.pfs.AddFile.URLSource
	7,   // 59: v1.pfs.CopyFile.src:type_name -> v1.pfs.File
	13,  // 60: v1.pfs.ModifyFileRequest.set_commit:type_name -> v1.pfs.Commit
	36,  // 61: v1.pfs.ModifyFileRequest.add_file:type_name -> v1.pfs.AddFile
	37,  // 62: v1.pfs.ModifyFileRequest.delete_file:type_name -> v1.pfs.DeleteFile
	38,  // 63: v1.pfs.ModifyFileRequest.copy_file:type_name -> v1.pfs.CopyFile
	7,   // 64: v1.pfs.GetFileRequest.file:type_name -> v1.pfs.File
	7,   // 65: v1.pfs.InspectFileRequest.file:type_name -> v1.pfs.File
	7,   // 66: v1.pfs.ListFileRequest.file:type_name -> v1.pfs.File
	7,   // 67: v1.pfs.WalkFileRequest.file:type_name -> v1.pfs.File
	13,  // 68: v1.pfs.GlobFileRequest.commit:type_name -> v1.pfs.Commit
	7,   // 69: v1.pfs.DiffFileRequest.new_file:type_name -> v1.pfs.File
	7,   // 70: v1.pfs.DiffFileRequest.old_file:type_name -> v1.pfs.File
	17,  // 71: v1.pfs.DiffFileResponse.new_file:type_name -> v1.pfs.FileInfo
	17,  // 72: v1.pfs.DiffFileResponse.old_file:type_name -> v1.pfs.FileInfo
	13,  // 73: v1.pfs.GetFileSetRequest.commit:type_name -> v1.pfs.Commit
	13,  // 74: v1.pfs.AddFileSetRequest.commit:type_name -> v1.pfs.Commit
	79,  // 75: v1.pfs.PutCacheRequest.value:type_name -> google.protobuf.Any
	79,  // 76: v1.pfs.GetCacheResponse.value:type_name -> google.protobuf.Any
	6,   // 77: v1.pfs.RunLoadTestRequest.branch:type_name -> v1.pfs.Branch
	6,   // 78: v1.pfs.RunLoadTestResponse.branch:type_name -> v1.pfs.Branch
	80,  // 79: v1.pfs.RunLoadTestResponse.duration:type_name -> google.protobuf.Duration
	71,  // 80: v1.pfs.SQLDatabaseEgress.file_format:type_name -> v1.pfs.SQLDatabaseEgress.FileFormat
	72,  // 81: v1.pfs.SQLDatabaseEgress.secret:type_name -> v1.pfs.SQLDatabaseEgress.Secret
	13,  // 82: v1.pfs.EgressRequest.commit:type_name -> v1.pfs.Commit
	64,  // 83: v1.pfs.EgressRequest.object_storage:type_name -> v1.pfs.ObjectStorageEgress
	65,  // 84: v1.pfs.EgressRequest.sql_database:type_name -> v1.pfs.SQLDatabaseEgress
	73,  // 85: v1.pfs.EgressResponse.object_storage:type_name -> v1.pfs.EgressResponse.ObjectStorageResult
	74,  // 86: v1.pfs.EgressResponse.sql_database:type_name -> v1.pfs.EgressResponse.SQLDatabaseResult
	80,  // 87: v1.pfs.CommitInfo.Details.compacting_time:type_name -> google.protobuf.Duration
	80,  // 88: v1.pfs.CommitInfo.Details.validating_time:type_name -> google.protobuf.Duration
	4,   // 89: v1.pfs.SQLDatabaseEgress.FileFormat.type:type_name -> v1.pfs.SQLDatabaseEgress.FileFormat.Type
	75,  // 90: v1.pfs.EgressResponse.SQLDatabaseResult.rows_written:type_name -> v1.pfs.EgressResponse.SQLDatabaseResult.RowsWrittenEntry
	18,  // 91: v1.pfs.API.CreateRepo:input_type -> v1.pfs.CreateRepoRequest
	19,  // 92: v1.pfs.API.InspectRepo:input_type -> v1.pfs.InspectRepoRequest
	20,  // 93: v1.pfs.API.ListRepo:input_type -> v1.pfs.ListRepoRequest
	21,  // 94: v1.pfs.API.DeleteRepo:input_type -> v1.pfs.DeleteRepoRequest
	22,  // 95: v1.pfs.API.StartCommit:input_type -> v1.pfs.StartCommitRequest
	23,  // 96: v1.pfs.API.FinishCommit:input_type -> v1.pfs.FinishCommitRequest
	31,  // 97: v1.pfs.API.ClearCommit:input_type -> v1.pfs.ClearCommitRequest
	24,  // 98: v1.pfs.API.InspectCommit:input_type -> v1.pfs.InspectCommitRequest
	25,  // 99: v1.pfs.API.ListCommit:input_type -> v1.pfs.ListCommitRequest
	30,  // 100: v1.pfs.API.SubscribeCommit:input_type -> v1.pfs.SubscribeCommitRequest
	26,  // 101: v1.pfs.API.InspectCommitSet:input_type -> v1.pfs.InspectCommitSetRequest
	27,  // 102: v1.pfs.API.ListCommitSet:input_type -> v1.pfs.ListCommitSetRequest
	28,  // 103: v1.pfs.API.SquashCommitSet:input_type -> v1.pfs.SquashCommitSetRequest
	29,  // 104: v1.pfs.API.DropCommitSet:input_type -> v1.pfs.DropCommitSetRequest
	32,  // 105: v1.pfs.API.CreateBranch:input_type -> v1.pfs.CreateBranchRequest
	33,  // 106: v1.pfs.API.InspectBranch:input_type -> v1.pfs.InspectBranchRequest
	34,  // 107: v1.pfs.API.ListBranch:input_type -> v1.pfs.ListBranchRequest
	35,  // 108: v1.pfs.API.DeleteBranch:input_type -> v1.pfs.DeleteBranchRequest
	39,  // 109: v1.pfs.API.ModifyFile:input_type -> v1.pfs.ModifyFileRequest
	40,  // 110: v1.pfs.API.GetFile:input_type -> v1.pfs.GetFileRequest
	40,  // 111: v1.pfs.API.GetFileTAR:input_type -> v1.pfs.GetFileRequest
	41,  // 112: v1.pfs.API.InspectFile:input_type -> v1.pfs.InspectFileRequest
	42,  // 113: v1.pfs.API.ListFile:input_type -> v1.pfs.ListFileRequest
	43,  // 114: v1.pfs.API.WalkFile:input_type -> v1.pfs.WalkFileRequest
	44,  // 115: v1.pfs.API.GlobFile:input_type -> v1.pfs.GlobFileRequest
	45,  // 116: v1.pfs.API.DiffFile:input_type -> v1.pfs.DiffFileRequest
	60,  // 117: v1.pfs.API.ActivateAuth:input_type -> v1.pfs.ActivateAuthRequest
	81,  // 118: v1.pfs.API.DeleteAll:input_type -> google.protobuf.Empty
	47,  // 119: v1.pfs.API.Fsck:input_type -> v1.pfs.FsckRequest
	39,  // 120: v1.pfs.API.CreateFileSet:input_type -> v1.pfs.ModifyFileRequest
	50,  // 121: v1.pfs.API.GetFileSet:input_type -> v1.pfs.GetFileSetRequest
	51,  // 122: v1.pfs.API.AddFileSet:input_type -> v1.pfs.AddFileSetRequest
	52,  // 123: v1.pfs.API.RenewFileSet:input_type -> v1.pfs.RenewFileSetRequest
	53,  // 124: v1.pfs.API.ComposeFileSet:input_type -> v1.pfs.ComposeFileSetRequest
	54,  // 125: v1.pfs.API.CheckStorage:input_type -> v1.pfs.CheckStorageRequest
	56,  // 126: v1.pfs.API.PutCache:input_type -> v1.pfs.PutCacheRequest
	57,  // 127: v1.pfs.API.GetCache:input_type -> v1.pfs.GetCacheRequest
	59,  // 128: v1.pfs.API.ClearCache:input_type -> v1.pfs.ClearCacheRequest
	62,  // 129: v1.pfs.API.RunLoadTest:input_type -> v1.pfs.RunLoadTestRequest
	81,  // 130: v1.pfs.API.RunLoadTestDefault:input_type -> google.protobuf.Empty
	82,  // 131: v1.pfs.API.ListTask:input_type -> v1.task.ListTaskRequest
	66,  // 132: v1.pfs.API.Egress:input_type -> v1.pfs.EgressRequest
	81,  // 133: v1.pfs.API.CreateRepo:output_type -> google.protobuf.Empty
	8,   // 134: v1.pfs.API.InspectRepo:output_type -> v1.pfs.RepoInfo
	8,   // 135: v1.pfs.API.ListRepo:output_type -> v1.pfs.RepoInfo
	81,  // 136: v1.pfs.API.DeleteRepo:output_type -> google.protobuf.Empty
	13,  // 137: v1.pfs.API.StartCommit:output_type -> v1.pfs.Commit
	81,  // 138: v1.pfs.API.FinishCommit:output_type -> google.protobuf.Empty
	81,  // 139: v1.pfs.API.ClearCommit:output_type -> google.protobuf.Empty
	14,  // 140: v1.pfs.API.InspectCommit:output_type -> v1.pfs.CommitInfo
	14,  // 141: v1.pfs.API.ListCommit:output_type -> v1.pfs.CommitInfo
	14,  // 142: v1.pfs.API.SubscribeCommit:output_type -> v1.pfs.CommitInfo
	14,  // 143: v1.pfs.API.InspectCommitSet:output_type -> v1.pfs.CommitInfo
	16,  // 144: v1.pfs.API.ListCommitSet:output_type -> v1.pfs.CommitSetInfo
	81,  // 145: v1.pfs.API.SquashCommitSet:output_type -> google.protobuf.Empty
	81,  // 146: v1.pfs.API.DropCommitSet:output_type -> google.protobuf.Empty
	81,  // 147: v1.pfs.API.CreateBranch:output_type -> google.protobuf.Empty
	10,  // 148: v1.pfs.API.InspectBranch:output_type -> v1.pfs.BranchInfo
	10,  // 149: v1.pfs.API.ListBranch:output_type -> v1.pfs.BranchInfo
	81,  // 150: v1.pfs.API.DeleteBranch:output_type -> google.protobuf.Empty
	81,  // 151: v1.pfs.API.ModifyFile:output_type -> google.protobuf.Empty
	78,  // 152: v1.pfs.API.GetFile:output_type -> google.protobuf.BytesValue
	78,  // 153: v1.pfs.API.GetFileTAR:output_type -> google.protobuf.BytesValue
	17,  // 154: v1.pfs.API.InspectFile:output_type -> v1.pfs.FileInfo
	17,  // 155: v1.pfs.API.ListFile:output_type -> v1.pfs.FileInfo
	17,  // 156: v1.pfs.API.WalkFile:output_type -> v1.pfs.FileInfo
	17,  // 157: v1.pfs.API.GlobFile:output_type -> v1.pfs.FileInfo
	46,  // 158: v1.pfs.API.DiffFile:output_type -> v1.pfs.DiffFileResponse
	61,  // 159: v1.pfs.API.ActivateAuth:output_type -> v1.pfs.ActivateAuthResponse
	81,  // 160: v1.pfs.API.DeleteAll:output_type -> google.protobuf.Empty
	48,  // 161: v1.pfs.API.Fsck:output_type -> v1.pfs.FsckResponse
	49,  // 162: v1.pfs.API.CreateFileSet:output_type -> v1.pfs.CreateFileSetResponse
	49,  // 163: v1.pfs.API.GetFileSet:output_type -> v1.pfs.CreateFileSetResponse
	81,  // 164: v1.pfs.API.AddFileSet:output_type -> google.protobuf.Empty
	81,  // 165: v1.pfs.API.RenewFileSet:output_type -> google.protobuf.Empty
	49,  // 166: v1.pfs.API.ComposeFileSet:output_type -> v1.pfs.CreateFileSetResponse
	55,  // 167: v1.pfs.API.CheckStorage:output_type -> v1.pfs.CheckStorageResponse
	81,  // 168: v1.pfs.API.PutCache:output_type -> google.protobuf.Empty
	58,  // 169: v1.pfs.API.GetCache:output_type -> v1.pfs.GetCacheResponse
	81,  // 170: v1.pfs.API.ClearCache:output_type -> google.protobuf.Empty
	63,  // 171: v1.pfs.API.RunLoadTest:output_type -> v1.pfs.RunLoadTestResponse
	63,  // 172: v1.pfs.API.RunLoadTestDefault:output_type -> v1.pfs.RunLoadTestResponse
	83,  // 173: v1.pfs.API.ListTask:output_type -> v1.task.TaskInfo
	67,  // 174: v1.pfs.API.Egress:output_type -> v1.pfs.EgressResponse
	133, // [133:175] is the sub-list for method output_type
	91,  // [91:133] is the sub-list for method input_type
	91,  // [91:91] is the sub-list for extension type_name
	91,  // [91:91] is the sub-list for extension extendee
	0,   // [0:91] is the sub-list for field type_name
}

func init() { file_pkg_api_v1_pfs_pfs_proto_init() }
func file_pkg_api_v1_pfs_pfs_proto_init() {
	if File_pkg_api_v1_pfs_pfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectCommitSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SquashCommitSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCommitSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalkFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewFileSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFileSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStorageEgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLDatabaseEgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoInfo_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitInfo_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFile_URLSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLDatabaseEgress_FileFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLDatabaseEgress_Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressResponse_ObjectStorageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_pfs_pfs_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressResponse_SQLDatabaseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_api_v1_pfs_pfs_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*AddFile_Raw)(nil),
		(*AddFile_Url)(nil),
	}
	file_pkg_api_v1_pfs_pfs_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*ModifyFileRequest_SetCommit)(nil),
		(*ModifyFileRequest_AddFile)(nil),
		(*ModifyFileRequest_DeleteFile)(nil),
		(*ModifyFileRequest_CopyFile)(nil),
	}
	file_pkg_api_v1_pfs_pfs_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*EgressRequest_ObjectStorage)(nil),
		(*EgressRequest_SqlDatabase)(nil),
	}
	file_pkg_api_v1_pfs_pfs_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*EgressResponse_ObjectStorage)(nil),
		(*EgressResponse_SqlDatabase)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v1_pfs_pfs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_v1_pfs_pfs_proto_goTypes,
		DependencyIndexes: file_pkg_api_v1_pfs_pfs_proto_depIdxs,
		EnumInfos:         file_pkg_api_v1_pfs_pfs_proto_enumTypes,
		MessageInfos:      file_pkg_api_v1_pfs_pfs_proto_msgTypes,
	}.Build()
	File_pkg_api_v1_pfs_pfs_proto = out.File
	file_pkg_api_v1_pfs_pfs_proto_rawDesc = nil
	file_pkg_api_v1_pfs_pfs_proto_goTypes = nil
	file_pkg_api_v1_pfs_pfs_proto_depIdxs = nil
}
